/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Enums.TipoAlquiler;
import Enums.Zona;
import accesoDatos.AlquilerData;
import accesoDatos.PropietarioData;
import entidades.Alquiler;
import entidades.Cliente;
import entidades.Garante;
import entidades.Inmueble;
import entidades.Propietario;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.time.LocalDate;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Compaq
 */
public class ListarAlquileres extends javax.swing.JInternalFrame {

    AlquilerData alqData = new AlquilerData();
    PropietarioData proData = new PropietarioData();
    public final DefaultTableModel modelo = new DefaultTableModel() {

        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    private final TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
    // Creo un TableCellRenderer anónimo para personalizar la columna de números
    DefaultTableCellRenderer numberRenderer = new DefaultTableCellRenderer() {
        private Format formatter = new DecimalFormat("#,##0", DecimalFormatSymbols.getInstance(Locale.US));

        @Override
        public void setValue(Object value) {
            if (value instanceof Number) {
                value = formatter.format(value);
            }
            super.setValue(value);
        }
    };

    public ListarAlquileres() {
        initComponents();
        armarCabecera();
        jTabla.setShowGrid(true);//Metodo para que se ven las lines de la tabla
        jTabla.setGridColor(Color.lightGray);//Metodo para cambiar de color las lineas internas
        // Asocia el TableRowSorter al JTable
        jTabla.setRowSorter(sorter);//Metodo para ordenar el contenido de la tabla
        jTabla.getTableHeader().setReorderingAllowed(false);//Metodo para que las columnas permanescan estaticas
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            ImageIcon icon = new ImageIcon(getClass().getResource("/Iconos/61911070.jpg"));
            Image image = icon.getImage();
            public void paintComponent(Graphics g){
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabla = new javax.swing.JTable();
        jrTodos = new javax.swing.JRadioButton();
        jrPropietario = new javax.swing.JRadioButton();
        jrTipo = new javax.swing.JRadioButton();
        jrZona = new javax.swing.JRadioButton();
        jcPropietario = new javax.swing.JComboBox<>();
        jcTipo = new javax.swing.JComboBox<>();
        jcZona = new javax.swing.JComboBox<>();
        jrDisponibles = new javax.swing.JRadioButton();
        jrNoDisponibles = new javax.swing.JRadioButton();
        jbSalir = new javax.swing.JButton();

        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Listado de Alquileres");

        jTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabla);

        jrTodos.setForeground(new java.awt.Color(255, 255, 255));
        jrTodos.setText("Todos");
        jrTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrTodosActionPerformed(evt);
            }
        });

        jrPropietario.setForeground(new java.awt.Color(255, 255, 255));
        jrPropietario.setText("Por Propietario");
        jrPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrPropietarioActionPerformed(evt);
            }
        });

        jrTipo.setForeground(new java.awt.Color(255, 255, 255));
        jrTipo.setText("Por Tipo");
        jrTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrTipoActionPerformed(evt);
            }
        });

        jrZona.setForeground(new java.awt.Color(255, 255, 255));
        jrZona.setText("Por Zona");
        jrZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrZonaActionPerformed(evt);
            }
        });

        jcPropietario.setPreferredSize(new java.awt.Dimension(160, 26));
        jcPropietario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcPropietarioItemStateChanged(evt);
            }
        });
        jcPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcPropietarioActionPerformed(evt);
            }
        });

        jcTipo.setPreferredSize(new java.awt.Dimension(160, 26));
        jcTipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcTipoItemStateChanged(evt);
            }
        });

        jcZona.setPreferredSize(new java.awt.Dimension(160, 26));
        jcZona.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcZonaItemStateChanged(evt);
            }
        });

        jrDisponibles.setForeground(new java.awt.Color(255, 255, 255));
        jrDisponibles.setText("Disponibles");
        jrDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrDisponiblesActionPerformed(evt);
            }
        });

        jrNoDisponibles.setForeground(new java.awt.Color(255, 255, 255));
        jrNoDisponibles.setText("No Disponibles");
        jrNoDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrNoDisponiblesActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jrTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jrPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(129, 129, 129)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jrTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jrZona, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcZona, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jrDisponibles)
                        .addGap(173, 173, 173)
                        .addComponent(jrNoDisponibles)
                        .addGap(173, 173, 173)
                        .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(77, 77, 77))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrTodos)
                    .addComponent(jrPropietario)
                    .addComponent(jrTipo)
                    .addComponent(jrZona))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrDisponibles)
                    .addComponent(jrNoDisponibles)
                    .addComponent(jbSalir))
                .addGap(59, 59, 59))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrTodosActionPerformed
        // TODO add your handling code here:
        jrTodos.setEnabled(true);
        borrarFilas();
        jrTipo.setSelected(false);
        jrZona.setSelected(false);
        jrPropietario.setSelected(false);
        jcTipo.setEnabled(false);
        jcZona.setEnabled(false);
        jcPropietario.setEnabled(false);
        jcTipo.removeAllItems();
        jcZona.removeAllItems();
        jcPropietario.removeAllItems();
        if (jrTodos.isSelected()) {

            for (Alquiler alquiler : alqData.ListarTodosAlquileres()) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
            jTabla.repaint();
        }
    }//GEN-LAST:event_jrTodosActionPerformed

    private void jrPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrPropietarioActionPerformed
        // TODO add your handling code here:
        jcPropietario.removeAllItems();
        borrarFilas();
        jrPropietario.setEnabled(true);
        jcPropietario.setEnabled(true);
        jcTipo.removeAllItems();
        jcZona.removeAllItems();
        jrTipo.setSelected(false);
        jrZona.setSelected(false);
        jrTodos.setSelected(false);
        jrDisponibles.setSelected(false);
        jrNoDisponibles.setSelected(false);
        jcTipo.setEnabled(false);
        jcZona.setEnabled(false);
        llenarComboPropietarios();


    }//GEN-LAST:event_jrPropietarioActionPerformed

    private void jcPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcPropietarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcPropietarioActionPerformed

    private void jcPropietarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcPropietarioItemStateChanged
        // TODO add your handling code here:
        borrarFilas();
        if (jrPropietario.isSelected()) {

            if (jcPropietario.getSelectedItem() != null) {

                Propietario prop = (Propietario) jcPropietario.getSelectedItem();
                int id = prop.getIdPropietario();
                for (Alquiler alquiler : alqData.ListarTodosAlquileresXPropietario(id)) {
                    String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                    jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                    modelo.addRow(new Object[]{
                        alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                        alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                        alquiler.getFechaFirma(), estado

                    });
                }
                jTabla.repaint();
            }
        }
    }//GEN-LAST:event_jcPropietarioItemStateChanged

    private void jrTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrTipoActionPerformed
        // TODO add your handling code here:
        jcTipo.removeAllItems();
        jrPropietario.setSelected(false);
        borrarFilas();

        jcTipo.setEnabled(true);
        jcPropietario.removeAllItems();
        jcZona.removeAllItems();

        jrZona.setSelected(false);
        jrTodos.setSelected(false);
        jrDisponibles.setSelected(false);
        jrNoDisponibles.setSelected(false);
        jcPropietario.setEnabled(false);
        jcZona.setEnabled(false);
        llenarComboTipo();


    }//GEN-LAST:event_jrTipoActionPerformed

    private void jcTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcTipoItemStateChanged
        // TODO add your handling code here:
        borrarFilas();
        if (jrTipo.isSelected()) {
            if (jcTipo.getSelectedItem() != null) {
                TipoAlquiler tipoAlq = (TipoAlquiler) jcTipo.getSelectedItem();

                for (Alquiler alquiler : alqData.ListarTodosAlquileresXtipo(tipoAlq)) {
                    String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                    jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                    modelo.addRow(new Object[]{
                        alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                        alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                        alquiler.getFechaFirma(), estado

                    });
                }
                jTabla.repaint();
            }
        }
    }//GEN-LAST:event_jcTipoItemStateChanged

    private void jrZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrZonaActionPerformed
        // TODO add your handling code here:
        jcZona.removeAllItems();
        jrZona.setEnabled(true);
        jcZona.setEnabled(true);
        jrPropietario.setSelected(false);
        borrarFilas();
        jrTipo.setSelected(false);
        jcPropietario.removeAllItems();
        jcTipo.removeAllItems();
        jrDisponibles.setSelected(false);
        jrNoDisponibles.setSelected(false);
        jcTipo.setEnabled(false);
        jrTodos.setSelected(false);

        jcPropietario.setEnabled(false);

        llenarComboZona();

    }//GEN-LAST:event_jrZonaActionPerformed

    private void jcZonaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcZonaItemStateChanged
        // TODO add your handling code here:
        borrarFilas();
        if (jrZona.isSelected()) {
            if (jcZona.getSelectedItem() != null) {
                Zona zona = (Zona) jcZona.getSelectedItem();

                for (Alquiler alquiler : alqData.ListarTodosAlquileresXZona(zona)) {
                    String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                    jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                    modelo.addRow(new Object[]{
                        alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                        alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                        alquiler.getFechaFirma(), estado

                    });
                }
                jTabla.repaint();
            }
        }
    }//GEN-LAST:event_jcZonaItemStateChanged

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jrDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrDisponiblesActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        if (jrTodos.isSelected()) {
//            borrarFilas();
            jrNoDisponibles.setSelected(false);
            listarTodosActivos();
            jTabla.repaint();
        } else if (jrPropietario.isSelected()) {
//            borrarFilas();
            jrNoDisponibles.setSelected(false);
            listarPropietariosActivos();
            jTabla.repaint();
        } else if (jrTipo.isSelected()) {
//            borrarFilas();
            jrNoDisponibles.setSelected(false);
            listarTipoActivos();
            jTabla.repaint();
        } else if (jrZona.isSelected()) {
//            borrarFilas();
            jrNoDisponibles.setSelected(false);
            listarZonaActivos();
            jTabla.repaint();
        }


    }//GEN-LAST:event_jrDisponiblesActionPerformed

    private void jrNoDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrNoDisponiblesActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        if (jrTodos.isSelected()) {
//            borrarFilas();
            jrDisponibles.setSelected(false);
            listarTodosNoActivos();
            jTabla.repaint();
        } else if (jrPropietario.isSelected()) {
//            borrarFilas();
            jrDisponibles.setSelected(false);
            listarPropietariosNoActivos();
            jTabla.repaint();
        } else if (jrTipo.isSelected()) {
//            borrarFilas();
            jrDisponibles.setSelected(false);
            listarTipoNoActivos();
            jTabla.repaint();
        } else if (jrZona.isSelected()) {
//            borrarFilas();
            jrDisponibles.setSelected(false);
            listarZonaNoActivos();
            jTabla.repaint();
        }
    }//GEN-LAST:event_jrNoDisponiblesActionPerformed

    private void jTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaMouseClicked
        // TODO add your handling code here:                                  
        if (evt.getClickCount() == 2) {
            int fila = jTabla.getSelectedRow();
            if (fila >= 0) {
                ModificarAlquiler ma = new ModificarAlquiler();
                Menu.Escritorio.add(ma);
                ma.toFront();
                ma.setVisible(true);
            }
            if (fila != -1) {
                int id = (int) jTabla.getValueAt(fila, 0);
                Inmueble inm = (Inmueble) jTabla.getValueAt(fila, 1);
                Cliente idCli = (Cliente) jTabla.getValueAt(fila, 2);
                Garante idGar = (Garante) jTabla.getValueAt(fila, 3);
                TipoAlquiler tipoAlq = (TipoAlquiler) jTabla.getValueAt(fila, 5);
                LocalDate fechaIn = (LocalDate) jTabla.getValueAt(fila, 6);
                LocalDate fechaFin = (LocalDate) jTabla.getValueAt(fila, 7);
                double PrecioEs = Double.parseDouble(jTabla.getValueAt(fila, 8).toString());
                double Deposi = Double.parseDouble(jTabla.getValueAt(fila, 9).toString());
                String claus = jTabla.getValueAt(fila, 10).toString();
                LocalDate fechaFir = (LocalDate) jTabla.getValueAt(fila, 11);
                ModificarAlquiler modifAlq = obtenerModifalqFrame();

                if (modifAlq != null) {
                    modifAlq.setTextFieldValue(id, inm, idCli, idGar,  tipoAlq,  fechaIn, fechaFin, PrecioEs, Deposi, claus, fechaFir);
                }
            }
        }
    }//GEN-LAST:event_jTablaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTabla;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Propietario> jcPropietario;
    private javax.swing.JComboBox<TipoAlquiler> jcTipo;
    private javax.swing.JComboBox<Zona> jcZona;
    private javax.swing.JRadioButton jrDisponibles;
    private javax.swing.JRadioButton jrNoDisponibles;
    private javax.swing.JRadioButton jrPropietario;
    private javax.swing.JRadioButton jrTipo;
    private javax.swing.JRadioButton jrTodos;
    private javax.swing.JRadioButton jrZona;
    // End of variables declaration//GEN-END:variables

    private void borrarFilas() {
        int f = modelo.getRowCount();
        for (int i = f - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void llenarComboPropietarios() {
        jcPropietario.addItem(null);
        for (Propietario prop : proData.listarProTodos()) {
            jcPropietario.addItem(prop);
        }
    }

    private void llenarComboTipo() {
        jcTipo.addItem(null);
        jcTipo.addItem(TipoAlquiler.EVENTOS);
        jcTipo.addItem(TipoAlquiler.COMERCIAL);
        jcTipo.addItem(TipoAlquiler.CORTO_PLAZO);
        jcTipo.addItem(TipoAlquiler.ESTACIONAMIENTO);
        jcTipo.addItem(TipoAlquiler.LARGO_PLAZO);
        jcTipo.addItem(TipoAlquiler.RESIDENCIAL);
        jcTipo.addItem(TipoAlquiler.VACACIONAL);
    }

    private void llenarComboZona() {
        jcZona.addItem(null);
        jcZona.addItem(Zona.RURAL);
        jcZona.addItem(Zona.COMERCIAL);
        jcZona.addItem(Zona.DE_RECREACION);
        jcZona.addItem(Zona.EDUCATIVA);
        jcZona.addItem(Zona.HISTÓRICA);
        jcZona.addItem(Zona.INDUSTRIAL);
        jcZona.addItem(Zona.RESIDENCIAL);
        jcZona.addItem(Zona.TURISTICA);
    }

    private void armarCabecera() {

        modelo.addColumn("Alquiler Nro.");
        modelo.addColumn("Inmueble");
        modelo.addColumn("Cliente");
        modelo.addColumn("Garante");
        modelo.addColumn("Tipo Cliente");
        modelo.addColumn("Tipo Alquiler");
        modelo.addColumn("Fecha Inicio");
        modelo.addColumn("Fecha Fin");
        modelo.addColumn("Precio Estimativo");
        modelo.addColumn("Deposito");
        modelo.addColumn("Clausula");
        modelo.addColumn("Fecha Firma");
        modelo.addColumn("estado");

        jTabla.setModel(modelo);

    }

    private void listarTodosActivos() {

        if (jrDisponibles.isSelected()) {
            for (Alquiler alquiler : alqData.ListarAlquileresDisp()) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            for (Alquiler alquiler : alqData.ListarTodosAlquileres()) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }

    }

    private void listarTipoActivos() {
        if (jrDisponibles.isSelected()) {
            TipoAlquiler tipoA = (TipoAlquiler) jcTipo.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresDisponiblesXtipo(tipoA)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            TipoAlquiler tipoB = (TipoAlquiler) jcTipo.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresXtipo(tipoB)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }
    }

    private void listarZonaActivos() {
        if (jrDisponibles.isSelected()) {
            Zona zonaA = (Zona) jcZona.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresDisponiblesXZona(zonaA)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            Zona zonaB = (Zona) jcZona.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresXZona(zonaB)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }
    }

    private void listarPropietariosActivos() {
        if (jrDisponibles.isSelected()) {
            Propietario prop1 = (Propietario) jcPropietario.getSelectedItem();
            int id = prop1.getIdPropietario();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresDisponiblesXPropietario(id)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            Propietario prop1 = (Propietario) jcPropietario.getSelectedItem();
            int id = prop1.getIdPropietario();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresXPropietario(id)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }
    }

    private void listarTodosNoActivos() {
        if (jrNoDisponibles.isSelected()) {
            for (Alquiler alquiler : alqData.ListarAlquileresNoDisponible()) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            for (Alquiler alquiler : alqData.ListarTodosAlquileres()) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }
    }

    private void listarTipoNoActivos() {
        if (jrNoDisponibles.isSelected()) {
            TipoAlquiler tipoA = (TipoAlquiler) jcTipo.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresNoDisponiblesXtipo(tipoA)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            TipoAlquiler tipoB = (TipoAlquiler) jcTipo.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresXtipo(tipoB)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }
    }

    private void listarZonaNoActivos() {
        if (jrNoDisponibles.isSelected()) {
            Zona zonaB = (Zona) jcZona.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresNoDisponiblesXZona(zonaB)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            Zona zonaB = (Zona) jcZona.getSelectedItem();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresXZona(zonaB)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }
    }

    private void listarPropietariosNoActivos() {
        if (jrNoDisponibles.isSelected()) {
            Propietario prop2 = (Propietario) jcPropietario.getSelectedItem();
            int id = prop2.getIdPropietario();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresNoDisponiblesXPropietario(id)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        } else {
            Propietario prop2 = (Propietario) jcPropietario.getSelectedItem();
            int id = prop2.getIdPropietario();
            for (Alquiler alquiler : alqData.ListarTodosAlquileresXPropietario(id)) {
                String estado = alquiler.isEstado() ? "Disponible" : "No Disponible";
                jTabla.getColumnModel().getColumn(8).setCellRenderer(numberRenderer);
                modelo.addRow(new Object[]{
                    alquiler.getIdAlquiler(), alquiler.getInmueble(), alquiler.getCliente(), alquiler.getGarante(), alquiler.getTipoC(), alquiler.getTipo(),
                    alquiler.getFechaInicio(), alquiler.getFechaFin(), alquiler.getPrecioEstimativo(), alquiler.getDeposito(), alquiler.getClausula(),
                    alquiler.getFechaFirma(), estado

                });
            }
        }
    }

    private ModificarAlquiler obtenerModifalqFrame() {
        JInternalFrame[] frames = getDesktopPane().getAllFrames();
        for (JInternalFrame frame : frames) {
            if (frame instanceof ModificarAlquiler) {
                return (ModificarAlquiler) frame;
            }
        }
        return null; // Devuelve null si no se encuentra el frame "DatosClientes"
    }

    int getSelectedRow() {
        int fila = jTabla.getSelectedRow(); //To change body of generated methods, choose Tools | Templates.
        return fila;
    }
}
