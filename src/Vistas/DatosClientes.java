/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Enums.TipoCliente;
import accesoDatos.ClienteData;
import entidades.Cliente;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class DatosClientes extends javax.swing.JInternalFrame {

    Cliente cli = new Cliente();
    ClienteData cData = new ClienteData();

    public final DefaultTableModel modelo = new DefaultTableModel() {

        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    private final TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
   
    
    public DatosClientes() {
        
        initComponents();
//         // CÃ³digo para centrar el JInternalFrame en la pantalla
//        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//        Dimension frameSize = getSize();
//        int x = (screenSize.width - frameSize.width) / 3;
//        int y = (screenSize.height - frameSize.height) / 3;
//        setLocation(x, y);
        jlTipo.setEnabled(false);
        jCombo2.setEnabled(false);
        armarCabecera();
        jrActivos.setEnabled(false);
        jrNoActivos.setEnabled(false);
        llenarCombo();
        llenarCombo2();
        jTabla.setShowGrid(true);//Metodo para que se ven las lines de la tabla
        jTabla.setGridColor(Color.lightGray);//Metodo para cambiar de color las lineas internas
        // Asocia el TableRowSorter al JTable
        jTabla.setRowSorter(sorter);
        int fila = jTabla.getSelectedRow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            ImageIcon icon = new ImageIcon(getClass().getResource("/Iconos/61911070.jpg"));
            Image image = icon.getImage();
            public void paintComponent(Graphics g){
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }
        };
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabla = new javax.swing.JTable();
        jSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCombo = new javax.swing.JComboBox<>();
        jtBuscar = new javax.swing.JTextField();
        jlTipo = new javax.swing.JLabel();
        jCombo2 = new javax.swing.JComboBox<>();
        jrActivos = new javax.swing.JRadioButton();
        jrNoActivos = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jBaja = new javax.swing.JButton();

        jTabla.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTabla.setAutoscrolls(false);
        jTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabla);

        jSalir.setText("Salir");
        jSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSalirActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Manejo de Datos Clientes.");

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Listar Clientes:");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Filtrar por:");

        jCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboActionPerformed(evt);
            }
        });

        jtBuscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtBuscarFocusGained(evt);
            }
        });
        jtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtBuscarActionPerformed(evt);
            }
        });
        jtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtBuscarKeyReleased(evt);
            }
        });

        jlTipo.setBackground(new java.awt.Color(255, 255, 255));
        jlTipo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jlTipo.setForeground(new java.awt.Color(255, 255, 255));
        jlTipo.setText("Tipo Cliente:");

        jCombo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCombo2ActionPerformed(evt);
            }
        });

        jrActivos.setText("Clientes Activos");
        jrActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrActivosActionPerformed(evt);
            }
        });

        jrNoActivos.setText("Clientes No Activos");
        jrNoActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrNoActivosActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("(Doble click: Modificar Cliente Seleccionado.)");

        jBaja.setText("Dar De Baja");
        jBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBajaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(328, 328, 328)
                        .addComponent(jLabel4)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jrActivos)
                .addGap(42, 42, 42)
                .addComponent(jrNoActivos)
                .addGap(174, 174, 174)
                .addComponent(jBaja)
                .addGap(106, 106, 106)
                .addComponent(jSalir)
                .addGap(91, 91, 91))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 961, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(68, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlTipo)
                        .addGap(18, 18, 18)
                        .addComponent(jCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlTipo)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSalir)
                    .addComponent(jLabel3)
                    .addComponent(jrActivos)
                    .addComponent(jrNoActivos)
                    .addComponent(jBaja))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jSalirActionPerformed

    private void jTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            int fila = jTabla.getSelectedRow(); // Obtiene la fila seleccionada al hacer doble clic
            if (fila >= 0) {
                ModificarCliente mc = new ModificarCliente(); //Creo un objeto del internalFrame
                Menu.Escritorio.add(mc);//llamo al escritorio del menu y agrego el internal
                mc.toFront();//con este metodo hago que el internal se muestre delante del internal que lo llama
                mc.setVisible(true);//metodo para mostrar el internal 
            }
            if (fila != -1) {
                String nombre = (String) jTabla.getValueAt(fila, 0); // creo una variable y e asigno el valor a transferir
                long cuil = (Long) jTabla.getValueAt(fila, 1);

//                int dni = Integer.parseInt((String) jTabla.getValueAt(fila, 2));
                String dniStr = (String) jTabla.getValueAt(fila, 2);
                int dni = 0; // Valor por defecto

                if (!dniStr.equals("N/A")) {
                    try {
                        dni = Integer.parseInt(dniStr);
                    } catch (NumberFormatException e) {
                        // Manejar la excepciÃ³n si el valor no es un nÃºmero vÃ¡lido
                    }
                }
                String trabajo = (String) jTabla.getValueAt(fila, 4);
                String domicilio = (String) jTabla.getValueAt(fila, 5);
                String ciudad = (String) jTabla.getValueAt(fila, 6);
                String cp = (String) jTabla.getValueAt(fila, 7);
                String telefono = (String) jTabla.getValueAt(fila, 8);
                String mail = (String) jTabla.getValueAt(fila, 9);

                // Accede al JInternalFrame " ModificarCliente" y llama al mÃ©todo para establecer el valor en el JTextField
                ModificarCliente clienteF = obtenerModificarFrame();//metodo que hace referncia a  ModificarCliente
                if (clienteF != null) {
                    clienteF.setTextFieldValue(nombre, cuil, dni, trabajo, domicilio, ciudad, cp, telefono, mail);//Paso por parametros los datos que va a recibir  ModificarCliente
                }
            }
        }
    }//GEN-LAST:event_jTablaMouseClicked

    private void jComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboActionPerformed
        // TODO add your handling code here:
        if (jCombo.getSelectedItem().equals("Por DNI")) {
            jtBuscar.setEnabled(true);
            borrar();
            jtBuscar.setText("Ingrese DNI");
            borrarFilas();
        } else if (jCombo.getSelectedItem().equals("Por Nombre")) {
            jtBuscar.setEnabled(true);
            borrar();
            jtBuscar.setText("Ingrese Nombre");
            borrarFilas();
        } else if (jCombo.getSelectedItem().equals("Por CUIL/CUIT")) {
            jtBuscar.setEnabled(true);
            borrar();
            jtBuscar.setText("Ingrese CUIL/CUIT");
            borrarFilas();
        } else if (jCombo.getSelectedItem().equals("Por Tipo Cliente")) {
            jtBuscar.setEnabled(false);
            jrActivos.setEnabled(true);
            jrNoActivos.setEnabled(true);
            jlTipo.setEnabled(true);
            jCombo2.setEnabled(true);
            borrarFilas();
            borrar();
        } else if (jCombo.getSelectedItem().equals("Todos")) {
            borrar();
            jrActivos.setEnabled(true);
            jrNoActivos.setEnabled(true);
            jtBuscar.setEnabled(false);
            borrarFilas();
            for (Cliente c : cData.listarTodosClientes()) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
            jTabla.repaint();

        } else if (jCombo.getSelectedIndex() == 0) {

            borrarFilas();
            borrar();

        }
    }//GEN-LAST:event_jComboActionPerformed

    private void jtBuscarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtBuscarFocusGained
        // TODO add your handling code here:
        if (jtBuscar.getText().equals("Ingrese DNI")) {
            jtBuscar.setText("");
            jrActivos.setEnabled(true);
            jrNoActivos.setEnabled(true);
        }
        if (jtBuscar.getText().equalsIgnoreCase("Ingrese CUIL/CUIT")) {
            jtBuscar.setText("");
            jrActivos.setEnabled(true);
            jrNoActivos.setEnabled(true);
        }
        if (jtBuscar.getText().equalsIgnoreCase("Ingrese Nombre")) {
            jtBuscar.setText("");
            jrActivos.setEnabled(true);
            jrNoActivos.setEnabled(true);
        }

    }//GEN-LAST:event_jtBuscarFocusGained

    private void jtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtBuscarKeyReleased
        // TODO add your handling code here:
        if (jCombo.getSelectedItem().equals("Por CUIL/CUIT")) {
            borrarFilas();
            for (Cliente c : cData.listarTodosClientes()) {
                if (String.valueOf(c.getCuilCuit()).startsWith(jtBuscar.getText())) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue, c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(),
                        c.getCodigoPostal(), c.getTelefono(), c.getMail(), estado
                    });
                }
            }
            if (jtBuscar.getText().equals("")) {
                borrarFilas();
            }
        }
        if (jCombo.getSelectedItem().equals("Por DNI")) {
            borrarFilas();
            for (Cliente c : cData.listarTodosClientes()) {
                if (String.valueOf(c.getDni()).startsWith(jtBuscar.getText())) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue, c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(),
                        c.getCodigoPostal(), c.getTelefono(), c.getMail(), estado
                    });
                }
            }
            if (jtBuscar.getText().equals("")) {
                borrarFilas();
            }
        }
        if (jCombo.getSelectedItem().equals("Por Nombre")) {
            borrarFilas();
            for (Cliente c : cData.listarTodosClientes()) {
                if (c.getNombre().toLowerCase().startsWith(jtBuscar.getText().toLowerCase())) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue, c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(),
                        c.getCodigoPostal(), c.getTelefono(), c.getMail(), estado
                    });
                }
            }
            if (jtBuscar.getText().equals("")) {
                borrarFilas();
            }
        }

    }//GEN-LAST:event_jtBuscarKeyReleased

    private void jrActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrActivosActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        if (jCombo.getSelectedItem().equals("Por Nombre")) {
            jrNoActivos.setSelected(false);
            activosNombre();
            jTabla.repaint();
        } else if (jCombo.getSelectedItem().equals("Por CUIL/CUIT")) {
            jrNoActivos.setSelected(false);
            activosCuilCuit();
            jTabla.repaint();
        } else if (jCombo.getSelectedItem().equals("Por DNI")) {
            jrNoActivos.setSelected(false);
            activosDni();
            jTabla.repaint();
        } else if (jCombo.getSelectedItem().equals("Todos")) {
            jrNoActivos.setSelected(false);
            todosActivos();
            jTabla.repaint();
        } else if (jCombo2.getSelectedItem().equals("Cliente FÃ­sico")) {
            jrNoActivos.setSelected(false);
            activosTipoFisico();
            jTabla.repaint();
        } else if (jCombo2.getSelectedItem().equals("Cliente JurÃ­dico")) {
            jrNoActivos.setSelected(false);
            activosTipoJuridico();
            jTabla.repaint();
        }
    }//GEN-LAST:event_jrActivosActionPerformed

    private void jrNoActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrNoActivosActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        if (jCombo.getSelectedItem().equals("Por Nombre")) {
            jrActivos.setSelected(false);
            noActivosNombre();
            jTabla.repaint();
        } else if (jCombo.getSelectedItem().equals("Por CUIL/CUIT")) {
            jrActivos.setSelected(false);
            noActivosCuilCuit();
            jTabla.repaint();
        } else if (jCombo.getSelectedItem().equals("Por DNI")) {
            jrActivos.setSelected(false);
            noActivosDni();
            jTabla.repaint();
        } else if (jCombo.getSelectedItem().equals("Todos")) {
            jrActivos.setSelected(false);
            todosNoActivos();
            jTabla.repaint();
        } else if (jCombo2.getSelectedItem().equals("Cliente FÃ­sico")) {
            jrActivos.setSelected(false);
            noActivosTipoFisico();
            jTabla.repaint();
        } else if (jCombo2.getSelectedItem().equals("Cliente JurÃ­dico")) {
            jrActivos.setSelected(false);
            noActivosTipoJuridico();
            jTabla.repaint();
        }
    }//GEN-LAST:event_jrNoActivosActionPerformed

    private void jCombo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCombo2ActionPerformed
        // TODO add your handling code here:
        if (jCombo2.getSelectedItem().equals("Cliente FÃ­sico")) {
            borrarFilas();
            jrActivos.setSelected(false);
            jrNoActivos.setSelected(false);
            for (Cliente c : cData.listarClientesPorTipo(TipoCliente.PERSONA_FISICA)) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
            jTabla.repaint();
        } else if (jCombo2.getSelectedItem().equals("Cliente JurÃ­dico")) {
            borrarFilas();
            jrActivos.setSelected(false);
            jrNoActivos.setSelected(false);
            for (Cliente c : cData.listarClientesPorTipo(TipoCliente.PERSONA_JURIDICA)) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
            jTabla.repaint();
        } else {
            borrarFilas();
            jrActivos.setSelected(false);
            jrNoActivos.setSelected(false);
        }
    }//GEN-LAST:event_jCombo2ActionPerformed

    private void jBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBajaActionPerformed
        // TODO add your handling code here:
        int fila = jTabla.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Cliente de la tabla.", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (fila != -1) {
            int resp = JOptionPane.showConfirmDialog(null, "Â¿Desea dar de baja al Cliente seleccionado?", "AtenciÃ³n!",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (resp == 0) {
                cli = cData.buscarClientePorCuilCuit((long) modelo.getValueAt(fila, 1));
                if (cli.isEstado() == true) {
                    if (!jrActivos.isSelected()) {
                        cData.eliminarCliente(cli.getIdCliente());
                        modelo.fireTableDataChanged();
                        borrar();
                        modelo.setValueAt("Inactivo/a", fila, 10);
                    } else if (jrActivos.isSelected()) {
                        cData.eliminarCliente(cli.getIdCliente());
                        modelo.removeRow(fila);
                        jTabla.repaint();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El Cliente seleccionado ya se encuentra dado de baja.");
                }

            }
        }


    }//GEN-LAST:event_jBajaActionPerformed

    private void jtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtBuscarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBaja;
    private javax.swing.JComboBox<String> jCombo;
    private javax.swing.JComboBox<String> jCombo2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTabla;
    private javax.swing.JLabel jlTipo;
    private javax.swing.JRadioButton jrActivos;
    private javax.swing.JRadioButton jrNoActivos;
    private javax.swing.JTextField jtBuscar;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera() {

        modelo.addColumn("Nombre");
        modelo.addColumn("CUIL/CUIT");
        modelo.addColumn("DNI");
        modelo.addColumn("Conyugue");
        modelo.addColumn("Trabajo");
        modelo.addColumn("Domicilio");
        modelo.addColumn("Ciudad");
        modelo.addColumn("C.Postal");
        modelo.addColumn("TelÃ©fono");
        modelo.addColumn("Mail");
        modelo.addColumn("Estado");
        jTabla.setModel(modelo);
    }

    private void borrar() {

        jrActivos.setSelected(false);
        jrNoActivos.setSelected(false);

        jtBuscar.setText("");

    }

    private void borrarFilas() {
        int f = modelo.getRowCount();
        for (int i = f - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    public void llenarCombo() {
        jCombo.addItem("Seleccionar");
        jCombo.addItem("Por Nombre");
        jCombo.addItem("Por DNI");
        jCombo.addItem("Por CUIL/CUIT");
        jCombo.addItem("Por Tipo Cliente");
        jCombo.addItem("Todos");
    }

    public void llenarCombo2() {
        jCombo2.addItem("Seleccionar");
        jCombo2.addItem("Cliente FÃ­sico");
        jCombo2.addItem("Cliente JurÃ­dico");

    }

    private ModificarCliente obtenerModificarFrame() {
        JInternalFrame[] frames = getDesktopPane().getAllFrames();
        for (JInternalFrame frame : frames) {
            if (frame instanceof ModificarCliente) {
                return (ModificarCliente) frame;
            }
        }
        return null; // Devuelve null si no se encuentra el frame "AltaClientes"
    }

    int getSelectedRow() {
        int fila = jTabla.getSelectedRow(); //To change body of generated methods, choose Tools | Templates.
        return fila;
    }

    private void activosDni() {
        char letra;
        if (jrActivos.isSelected()) {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                List<Cliente> clientes = cData.listarClientesActivosDni(letra);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                // Mostrar todos los alumnos cuando el botÃ³n estÃ© deseleccionado
                for (Cliente c : cData.listarTodosClientesDni(letra)) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        }
    }

    private void noActivosDni() {
        char letra;
        if (jrNoActivos.isSelected()) {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                List<Cliente> clientes = cData.listarClientesNoActivosDni(letra);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                // Mostrar todos los alumnos cuando el botÃ³n estÃ© deseleccionado
                for (Cliente c : cData.listarTodosClientesDni(letra)) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }

        }
    }

    private void todosActivos() {

        if (jrActivos.isSelected()) {
            if (jCombo.getSelectedItem().equals("Todos")) {

                List<Cliente> clientes = cData.listarTodosClientesActivos();

                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {

            for (Cliente c : cData.listarTodosClientes()) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
        }
    }

    private void todosNoActivos() {
        if (jrNoActivos.isSelected()) {
            if (jCombo.getSelectedItem().equals("Todos")) {

                List<Cliente> clientes = cData.listarTodosClientesNoActivos();

                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {

            for (Cliente c : cData.listarTodosClientes()) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
        }
    }

    private void activosNombre() {
        char letra;
        if (jrActivos.isSelected()) {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                List<Cliente> clientes = cData.listarClientesActivosPorNombre(letra);
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                // Mostrar todos los alumnos cuando el botÃ³n estÃ© deseleccionado
                for (Cliente c : cData.listarTodosClientesPorNombre(letra)) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }

        }
    }

    private void noActivosNombre() {
        char letra;
        if (jrNoActivos.isSelected()) {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                List<Cliente> clientes = cData.listarClientesNoActivosPorNombre(letra);
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                // Mostrar todos los alumnos cuando el botÃ³n estÃ© deseleccionado
                for (Cliente c : cData.listarTodosClientesPorNombre(letra)) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }

        }
    }

    private void activosCuilCuit() {
        char letra;
        if (jrActivos.isSelected()) {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                List<Cliente> clientes = cData.listarClientesActivosPorCuilCuit(letra);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                // Mostrar todos los alumnos cuando el botÃ³n estÃ© deseleccionado
                for (Cliente c : cData.listarTodosClientesPorCuilCuit(letra)) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }

        }
    }

    private void noActivosCuilCuit() {
        char letra;
        if (jrNoActivos.isSelected()) {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                List<Cliente> clientes = cData.listarClientesNoActivosPorCuilCuit(letra);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {
            if (!jtBuscar.getText().equals("")) {
                letra = jtBuscar.getText().toUpperCase().charAt(0); // Obtener la primera letra ingresada
                // Llamar al mÃ©todo en AlumnoData para obtener alumnos activos que comienzan con la letra ingresada
                // Mostrar todos los alumnos cuando el botÃ³n estÃ© deseleccionado
                for (Cliente c : cData.listarTodosClientesPorCuilCuit(letra)) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }

        }
    }

    private void activosTipoFisico() {
        TipoCliente tipo = TipoCliente.PERSONA_FISICA;
        if (jrActivos.isSelected()) {
            if (jCombo.getSelectedItem().equals("Por Tipo Cliente")) {

                List<Cliente> clientes = cData.listarClientesPorTipoActivos(tipo);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {

            for (Cliente c : cData.listarClientesPorTipo(tipo)) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
        }
    }

    private void noActivosTipoFisico() {
        TipoCliente tipo = TipoCliente.PERSONA_FISICA;
        if (jrNoActivos.isSelected()) {
            if (jCombo2.getSelectedItem().equals("Cliente FÃ­sico")) {

                List<Cliente> clientes = cData.listarClientesPorTipoNoActivos(tipo);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {

            for (Cliente c : cData.listarClientesPorTipo(tipo)) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
        }
    }

    private void activosTipoJuridico() {
        TipoCliente tipo = TipoCliente.PERSONA_JURIDICA;
        if (jrActivos.isSelected()) {
            if (jCombo2.getSelectedItem().equals("Cliente JurÃ­dico")) {

                List<Cliente> clientes = cData.listarClientesPorTipoActivos(tipo);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {

            for (Cliente c : cData.listarClientesPorTipo(tipo)) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
        }
    }

    private void noActivosTipoJuridico() {
        TipoCliente tipo = TipoCliente.PERSONA_JURIDICA;
        if (jrNoActivos.isSelected()) {
            if (jCombo2.getSelectedItem().equals("Cliente JurÃ­dico")) {

                List<Cliente> clientes = cData.listarClientesPorTipoNoActivos(tipo);
                // Actualizar la tabla con los resultados obtenidos
                for (Cliente c : clientes) {
                    String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                    String dni, conyugue;
                    if (c.getDni() == 0) {
                        dni = "N/A.";
                    } else {
                        dni = String.valueOf(c.getDni());
                    }
                    if (c.getConyugue() == null) {
                        conyugue = "N/A.";
                    } else {
                        conyugue = c.getConyugue().toString();
                    }
                    modelo.addRow(new Object[]{
                        c.getNombre(), c.getCuilCuit(), dni, conyugue,
                        c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                        c.getMail(), estado
                    });
                }
            }
        } else {

            for (Cliente c : cData.listarClientesPorTipo(tipo)) {
                String estado = c.isEstado() ? "Activo/a" : "Inactivo/a";
                String dni, conyugue;
                if (c.getDni() == 0) {
                    dni = "N/A.";
                } else {
                    dni = String.valueOf(c.getDni());
                }
                if (c.getConyugue() == null) {
                    conyugue = "N/A.";
                } else {
                    conyugue = c.getConyugue().toString();
                }
                modelo.addRow(new Object[]{
                    c.getNombre(), c.getCuilCuit(), dni, conyugue,
                    c.getLugarTrabajo(), c.getDomicilio(), c.getCiudad(), c.getCodigoPostal(), c.getTelefono(),
                    c.getMail(), estado
                });
            }
        }
    }

}
