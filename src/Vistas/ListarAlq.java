/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Enums.TipoAlquiler;
import Enums.TipoInmueble;
import Enums.Zona;
import accesoDatos.AlquilerData;
import accesoDatos.PropietarioData;
import entidades.Alquiler;
import entidades.Propietario;
import java.awt.JobAttributes;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Nicolás
 */
public class ListarAlq extends javax.swing.JInternalFrame {

    AlquilerData alqData = new AlquilerData();
    Alquiler alq = new Alquiler();
    PropietarioData pData = new PropietarioData();

    private DefaultTableModel modelo = new DefaultTableModel() {

        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    private final TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
    // Creo un TableCellRenderer anónimo para personalizar la columna de números
    DefaultTableCellRenderer numberRenderer = new DefaultTableCellRenderer() {
        private Format formatter = new DecimalFormat("#,##0", DecimalFormatSymbols.getInstance(Locale.US));

        @Override
        public void setValue(Object value) {
            if (value instanceof Number) {
                value = formatter.format(value);
            }
            super.setValue(value);
        }
    };

    public ListarAlq() {
        initComponents();
        armarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jRDisponibles = new javax.swing.JRadioButton();
        jRNoDispo = new javax.swing.JRadioButton();
        jRZona = new javax.swing.JRadioButton();
        jRTipo = new javax.swing.JRadioButton();
        jRPropietario = new javax.swing.JRadioButton();
        jRBTodosAlquileres = new javax.swing.JRadioButton();
        jCBTIpo = new javax.swing.JComboBox<>();
        jCBZona = new javax.swing.JComboBox<>();
        salir = new javax.swing.JButton();
        jCBProp = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Listado de Alquileres");

        jRDisponibles.setText("Disponibles");

        jRNoDispo.setText("No Disponibles");

        jRZona.setText("Por Zona");
        jRZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRZonaActionPerformed(evt);
            }
        });

        jRTipo.setText("Por Tipo");
        jRTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRTipoActionPerformed(evt);
            }
        });

        jRPropietario.setText("Por Propietario");
        jRPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRPropietarioActionPerformed(evt);
            }
        });

        jRBTodosAlquileres.setText("Todos");
        jRBTodosAlquileres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBTodosAlquileresActionPerformed(evt);
            }
        });

        jCBTIpo.setPreferredSize(new java.awt.Dimension(173, 26));
        jCBTIpo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBTIpoActionPerformed(evt);
            }
        });

        jCBZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBZonaActionPerformed(evt);
            }
        });

        salir.setText("Salir");

        jCBProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBPropActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRDisponibles)
                .addGap(103, 103, 103)
                .addComponent(jRNoDispo)
                .addGap(156, 156, 156)
                .addComponent(salir)
                .addGap(234, 234, 234))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(376, 376, 376)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRBTodosAlquileres)
                                .addGap(156, 156, 156)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRPropietario)
                                    .addComponent(jCBProp, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCBTIpo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRTipo))
                                .addGap(140, 140, 140)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRZona)
                                        .addGap(90, 90, 90))
                                    .addComponent(jCBZona, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRBTodosAlquileres)
                    .addComponent(jRPropietario)
                    .addComponent(jRTipo)
                    .addComponent(jRZona))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBTIpo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBProp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRNoDispo)
                    .addComponent(jRDisponibles)
                    .addComponent(salir))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRPropietarioActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        jCBProp.setEnabled(true);
        jCBTIpo.removeAllItems();
        jCBTIpo.setEnabled(false);
        jCBZona.removeAllItems();
        jCBZona.setEnabled(false);
        jRTipo.setSelected(false);
        jRZona.setSelected(false);
        jRBTodosAlquileres.setSelected(false);

        llenarComboPropietario();
    }//GEN-LAST:event_jRPropietarioActionPerformed

    private void jRBTodosAlquileresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBTodosAlquileresActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        jCBProp.setEnabled(false);
        jCBTIpo.removeAllItems();
        jCBTIpo.setEnabled(false);
        jCBZona.removeAllItems();
        jCBZona.setEnabled(false);
        jRTipo.setSelected(false);
        jRZona.setSelected(false);

        if (jRBTodosAlquileres.isSelected()) {
            for (Alquiler alquiler : alqData.ListarTodosAlquileres()) {
                System.out.println("todos" + alquiler);
            }
//    jTable1.getColumnModel().getColumn(10).setCellRenderer(renderer);

            modelo.addRow(new Object[]{
                alq.getIdAlquiler(), alq.getCliente(), alq.getGarante(), alq.getFechaInicio(), alq.getFechaFin(),
                alq.getPrecioEstimativo(), alq.getDeposito(), alq.getPrecioInicial(), alq.getClausula(),
                alq.getFechaFirma(), alq.isEstado()

            });
        }
        jTable1.repaint();

    }//GEN-LAST:event_jRBTodosAlquileresActionPerformed

    private void jRTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRTipoActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        if (jRTipo.isSelected()) {

            jCBProp.setEnabled(false);
            jCBTIpo.removeAllItems();
            jCBTIpo.setEnabled(true);
            jCBZona.removeAllItems();
            jCBZona.setEnabled(false);
            jRTipo.setSelected(true);
            jRZona.setSelected(false);
            jRBTodosAlquileres.setSelected(false);

            llenarComboTipo();
        }
    }//GEN-LAST:event_jRTipoActionPerformed

    private void jCBTIpoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBTIpoActionPerformed
        // TODO add your handling code here:
        borrarFilas();

//      jCBTIpo.removeAllItems();
        if (jRTipo.isSelected()) {
            if (jCBTIpo.getSelectedItem() != null) {
                TipoAlquiler tipoAl = (TipoAlquiler) jCBTIpo.getSelectedItem();
//                System.out.println("TIPO"+tipo.toString());
                //SIN ESTO NO HACE NADA
//            List<Alquiler> alquileres = alqData.ListarTodosAlquileresXtipo(tipo);
//            
//          
//
//            jTable1.getColumnModel().getColumn(6).setCellRenderer(renderer);
//            jTable1.getColumnModel().getColumn(8).setCellRenderer(renderer);

//            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                for (Alquiler alq2 : alqData.ListarTodosAlquileresXtipo(tipoAl)) {
                    System.out.println("tipo" + alq2.getTipo());

                    modelo.addRow(new Object[]{
                        alq2.getIdAlquiler(), alq2.getInmueble(), alq2.getCliente(), alq2.getGarante(), alq2.getTipoC(), alq2.getFechaInicio(), alq2.getFechaFin(),
                        alq2.getPrecioEstimativo(), alq2.getDeposito(), alq2.getPrecioInicial(), alq2.getClausula(),
                        alq2.getFechaFirma(), alq2.isEstado()
                    });
                    System.out.println(alq2.toString());
                }
                jTable1.repaint();
            }
        }
    }//GEN-LAST:event_jCBTIpoActionPerformed

    private void jRZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRZonaActionPerformed
        // TODO add your handling code here:
        if (jRZona.isSelected()) {

            borrarFilas();

            jCBProp.setEnabled(false);
            jCBTIpo.removeAllItems();
            jCBTIpo.setEnabled(false);
            jCBZona.removeAllItems();
            jCBZona.setEnabled(true);
            jRTipo.setSelected(false);
            jRZona.setSelected(true);
            jRBTodosAlquileres.setSelected(false);

            llenarComboZona();
}  
    }//GEN-LAST:event_jRZonaActionPerformed

    private void jCBPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBPropActionPerformed
        // TODO add your handling code here:
        borrarFilas();
      
//      jCBTIpo.removeAllItems();
    if (jRTipo.isSelected()) {
        if (jCBTIpo.getSelectedItem() != null) {
            TipoAlquiler tipo = (TipoAlquiler) jCBTIpo.getSelectedItem();
//                System.out.println("TIPO"+tipo.toString());
//                //SIN ESTO NO HACE NADA
//            List<Alquiler> alquileres = alqData.ListarTodosAlquileresXtipo(tipo);
//            
//          
//
//            jTable1.getColumnModel().getColumn(6).setCellRenderer(renderer);
//            jTable1.getColumnModel().getColumn(8).setCellRenderer(renderer);

//            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
//HASTA ACA
 

            for (Alquiler alq2 : alqData.ListarTodosAlquileresXtipo(tipo)) {
                System.out.println("tipo"+alq2.getTipo());
               

                modelo.addRow(new Object[]{
                      
                 alq2.getIdAlquiler(),alq2.getInmueble(), alq2.getCliente(), alq2.getGarante(),alq2.getTipoC(), alq2.getFechaInicio(), alq2.getFechaFin(),
                    alq2.getPrecioEstimativo(), alq2.getDeposito(), alq2.getPrecioInicial(), alq2.getClausula(),
                    alq2.getFechaFirma(), alq2.isEstado()
                });
                System.out.println(alq2.toString());
            }
            jTable1.repaint();
        }
    }
    }//GEN-LAST:event_jCBPropActionPerformed

    private void jCBZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBZonaActionPerformed
        // TODO add your handling code here:
        borrarFilas();
    if (jRZona.isSelected()) {
        if (jCBZona.getSelectedItem() != null) {
            Zona zona = (Zona) jCBZona.getSelectedItem();
//            System.out.println("1"+zona);
//          List<Alquiler> alquileres = alqData.ListarTodosAlquileresXZona(zona);
//            System.out.println("2"+alquileres);

//            jTable1.getColumnModel().getColumn(5).setCellRenderer(renderer);
//            jTable1.getColumnModel().getColumn(7).setCellRenderer(renderer);
//          
//          
//            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

            for (Alquiler alq3 : alqData.ListarTodosAlquileresXZona(zona)) {
                System.out.println(alq3.toString());
                modelo.addRow(new Object[]{
                   alq3.getIdAlquiler(),alq3.getInmueble(), alq3.getCliente(), alq3.getGarante(),alq3.getTipoC(), alq3.getFechaInicio(), alq3.getFechaFin(),
                    alq3.getPrecioEstimativo(), alq3.getDeposito(), alq3.getPrecioInicial(), alq3.getClausula(),
                    alq3.getFechaFirma(), alq3.isEstado()
                });
            }
            jTable1.repaint();
        }
    }
    }//GEN-LAST:event_jCBZonaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Propietario> jCBProp;
    private javax.swing.JComboBox<TipoAlquiler> jCBTIpo;
    private javax.swing.JComboBox<Zona> jCBZona;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRBTodosAlquileres;
    private javax.swing.JRadioButton jRDisponibles;
    private javax.swing.JRadioButton jRNoDispo;
    private javax.swing.JRadioButton jRPropietario;
    private javax.swing.JRadioButton jRTipo;
    private javax.swing.JRadioButton jRZona;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables

    private void llenarComboPropietario() {
        jCBProp.addItem(null);
        for (Propietario prop : pData.listarProTodosActivos()) {
//                System.out.println(prop);
            jCBProp.addItem(prop);
        }

    }

    private void borrarFilas() {
        int f = modelo.getRowCount();
        for (int i = f - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void llenarComboZona() {
        jCBZona.addItem(null);
        jCBZona.addItem(Zona.RESIDENCIAL);
        jCBZona.addItem(Zona.COMERCIAL);
        jCBZona.addItem(Zona.INDUSTRIAL);
        jCBZona.addItem(Zona.RURAL);
        jCBZona.addItem(Zona.TURISTICA);
        jCBZona.addItem(Zona.HISTÓRICA);
        jCBZona.addItem(Zona.EDUCATIVA);
        jCBZona.addItem(Zona.DE_RECREACION);
    }

    private void llenarComboTipo() {

        jCBTIpo.addItem(null);
        jCBTIpo.addItem(TipoAlquiler.RESIDENCIAL);
        jCBTIpo.addItem(TipoAlquiler.COMERCIAL);
        jCBTIpo.addItem(TipoAlquiler.VACACIONAL);
        jCBTIpo.addItem(TipoAlquiler.CORTO_PLAZO);
        jCBTIpo.addItem(TipoAlquiler.LARGO_PLAZO);
        jCBTIpo.addItem(TipoAlquiler.EVENTOS);
        jCBTIpo.addItem(TipoAlquiler.ESTACIONAMIENTO);

    }

    private void armarCabecera() {

        modelo.addColumn("IdAlquiler");
        modelo.addColumn("IdInmueble");
        modelo.addColumn("IdCliente");
        modelo.addColumn("IdGarante");
        modelo.addColumn("Tipo Cliente");
        modelo.addColumn("Tipo Alquiler");
        modelo.addColumn("Fecha Inicio");
        modelo.addColumn("Fecha Fin");
        modelo.addColumn("Precio Estimativo");
        modelo.addColumn("Deposito");
        modelo.addColumn("Precio Inicial");
        modelo.addColumn("Clausula");
        modelo.addColumn("Fecha Firma");
        modelo.addColumn("estado");

        jTable1.setModel(modelo);

    }

    int getSelectedRow() {
        int fila = jTable1.getSelectedRow(); //To change body of generated methods, choose Tools | Templates.
        return fila;
    }

}
